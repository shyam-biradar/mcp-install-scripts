AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Ceph on AWS with support of MCP ecosystem
Parameters:
  NodeCluster:
    Description: Reclass model to use
    Type: String
    Default: ceph_ha
    AllowedValues:
      - ceph_ha
  ReclassAddress:
    Description: Git repository with reclass
    Type: String
    Default: https://github.com/tomkukral/ceph_ha_model.git
  ReclassBranch:
    Description: Branch or reclass model
    Type: String
    Default: aws
  SaltMasterInstanceType:
    Description: SaltMaster EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  MonNodeInstanceType:
    Description: Ceph Mon node instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  OsdNodeInstanceType:
    Description: Kubernetes compute node EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  CmpNodeCount:
    Description: Number of Kubernetes compute nodes
    Type: String
    Default: 3
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: 'The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSRegion2AMI:
    eu-west-2:
      image: ami-f1d7c395
    us-west-1:
      image: ami-2afbde4a
    us-west-2:
      image: ami-efd0428f
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutboundAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable 22, 80 and ping
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: !Ref SSHLocation
          FromPort: '8'
          ToPort: '-1'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0

  # SaltMaster
  SaltMasterEIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: !Ref VPC
  SaltMasterEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt
        - SaltMasterEIP
        - AllocationId
      InstanceId: !Ref SaltMasterInstance
  SaltMasterInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.10.10
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref SaltMasterInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '.'
            - - 'cfg01'
              - !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - !Ref NodeCluster
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "# Install cfn-signal"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/tomkukral/heat-fragments/raw/aws/script/instance_boot.sh"
              - "wget -O /tmp/saltmaster_install.sh https://github.com/tomkukral/heat-fragments/raw/aws/script/saltmaster_install.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "chmod +x /tmp/saltmaster_install.sh"
              - "# Set AWS variables"
              - "export aws_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id | sed 's/i-//g' | cut -c 1-8)"
              - "export aws_resource='SaltMasterInstance'"
              - "export network01_prefix='10.0.10'"
              - !Join
                - ''
                - - export aws_region='
                  - !Ref 'AWS::Region'
                  - "'"
              - !Join
                - ''
                - - export aws_stack='
                  - !Ref 'AWS::StackName'
                  - "'"
              - "export node_os='xenial'"
              - "export node_hostname='cfg01'"
              - export config_host='127.0.0.1'
              - !Join
                - ''
                - - export node_domain='
                  - !Ref "AWS::Region"
                  - ".compute.internal"
                  - "'"
              - !Join
                - ''
                - - export cluster_name='
                  - !Ref NodeCluster
                  - "'"
              - "# Set reclass variables"
              - !Join
                - ''
                - - export reclass_address='
                  - !Ref ReclassAddress
                  - "'"
              - !Join
                - ''
                - - export reclass_branch='
                  - !Ref ReclassBranch
                  - "'"
              - "# Set variables"
              - export instance_cloud_init="$(cat /tmp/saltmaster_install.sh)"
              - "env"
              - "/tmp/instance_boot.sh"
    CreationPolicy:
          ResourceSignal:
            Timeout: PT20M
  # Cmn01
  Cmn01Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      SourceDestCheck: 'false'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.10.11
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref MonNodeInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '.'
            - - 'cmn01'
              - !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - !Ref NodeCluster
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "# Install cfn-signal"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/tomkukral/heat-fragments/raw/aws/script/instance_boot.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "# Set AWS variables"
              - "export aws_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id | sed 's/i-//g' | cut -c 1-8)"
              - "export aws_resource='Cmn01Instance'"
              - "export network01_prefix='10.0.10'"
              - !Join
                - ''
                - - export aws_region='
                  - !Ref 'AWS::Region'
                  - "'"
              - !Join
                - ''
                - - export aws_stack='
                  - !Ref 'AWS::StackName'
                  - "'"
              - "export node_os='xenial'"
              - !Join
                - ''
                - - export node_hostname="
                  - cmn01
                  - "\""
              - !Join
                - ''
                - - export node_domain='
                  - !Ref "AWS::Region"
                  - ".compute.internal"
                  - "'"
              - !Join
                - ''
                - - export cluster_name='
                  - !Ref NodeCluster
                  - "'"
              - "# Set variables"
              - !Join
                - ''
                - - export config_host='
                  - !GetAtt
                    - SaltMasterInstance
                    - PrivateIp
                  - "'"
              - export instance_cloud_init="date"
              - "env"
              - "/tmp/instance_boot.sh"
    CreationPolicy:
          ResourceSignal:
            Timeout: PT10M
  # Cmn02
  Cmn02Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      SourceDestCheck: 'false'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.10.12
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref MonNodeInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '.'
            - - 'cmn02'
              - !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - !Ref NodeCluster
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "# Install cfn-signal"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/tomkukral/heat-fragments/raw/aws/script/instance_boot.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "# Set AWS variables"
              - "export aws_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id | sed 's/i-//g' | cut -c 1-8)"
              - "export aws_resource='Cmn02Instance'"
              - "export network01_prefix='10.0.10'"
              - !Join
                - ''
                - - export aws_region='
                  - !Ref 'AWS::Region'
                  - "'"
              - !Join
                - ''
                - - export aws_stack='
                  - !Ref 'AWS::StackName'
                  - "'"
              - "export node_os='xenial'"
              - !Join
                - ''
                - - export node_hostname="
                  - cmn02
                  - "\""
              - !Join
                - ''
                - - export node_domain='
                  - !Ref "AWS::Region"
                  - ".compute.internal"
                  - "'"
              - !Join
                - ''
                - - export cluster_name='
                  - !Ref NodeCluster
                  - "'"
              - "# Set variables"
              - !Join
                - ''
                - - export config_host='
                  - !GetAtt
                    - SaltMasterInstance
                    - PrivateIp
                  - "'"
              - export instance_cloud_init="date"
              - "env"
              - "/tmp/instance_boot.sh"
    CreationPolicy:
          ResourceSignal:
            Timeout: PT10M
  # Cmn03
  Cmn03Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      SourceDestCheck: 'false'
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.10.13
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref MonNodeInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '.'
            - - 'cmn03'
              - !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - !Ref NodeCluster
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "# Install cfn-signal"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/tomkukral/heat-fragments/raw/aws/script/instance_boot.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "# Set AWS variables"
              - "export aws_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id | sed 's/i-//g' | cut -c 1-8)"
              - "export aws_resource='Cmn03Instance'"
              - "export network01_prefix='10.0.10'"
              - !Join
                - ''
                - - export aws_region='
                  - !Ref 'AWS::Region'
                  - "'"
              - !Join
                - ''
                - - export aws_stack='
                  - !Ref 'AWS::StackName'
                  - "'"
              - "export node_os='xenial'"
              - !Join
                - ''
                - - export node_hostname="
                  - cmn03
                  - "\""
              - !Join
                - ''
                - - export node_domain='
                  - !Ref "AWS::Region"
                  - ".compute.internal"
                  - "'"
              - !Join
                - ''
                - - export cluster_name='
                  - !Ref NodeCluster
                  - "'"
              - "# Set variables"
              - !Join
                - ''
                - - export config_host='
                  - !GetAtt
                    - SaltMasterInstance
                    - PrivateIp
                  - "'"
              - export instance_cloud_init="date"
              - "env"
              - "/tmp/instance_boot.sh"
    CreationPolicy:
          ResourceSignal:
            Timeout: PT10M

  # Compute nodes
  ComputeLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref OsdNodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdb
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/sdc
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/sdd
          Ebs:
            VolumeSize: 20
        - DeviceName: /dev/sde
          Ebs:
            VolumeSize: 60
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "# Install cfn-signal"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/tomkukral/heat-fragments/raw/aws/script/instance_boot.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "# Set AWS variables"
              - "export aws_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id | sed 's/i-//g' | cut -c 1-8)"
              - "export aws_resource='ComputesScalingGroup'"
              - "export network01_prefix='10.0.10'"
              - "export node_hostname=$(curl -s http://169.254.169.254/latest/meta-data/hostname)"
              - "export param_ceph_host_id=$(ip a show dev eth0 | grep 'inet ' | awk '{print $2}' | sed 's,/24,,' | awk -F'.' '{print $4}')"
              - !Join
                - ''
                - - export aws_region='
                  - !Ref 'AWS::Region'
                  - "'"
              - !Join
                - ''
                - - export aws_stack='
                  - !Ref 'AWS::StackName'
                  - "'"
              - "export node_os='xenial'"
              - !Join
                - ''
                - - export node_domain='
                  - !Ref "AWS::Region"
                  - ".compute.internal"
                  - "'"
              - !Join
                - ''
                - - export cluster_name='
                  - !Ref NodeCluster
                  - "'"
              - "# Set variables"
              - !Join
                - ''
                - - export config_host='
                  - !GetAtt
                    - SaltMasterInstance
                    - PrivateIp
                  - "'"
              - export instance_cloud_init="date"
              - "env"
              - "/tmp/instance_boot.sh"
  ComputesScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - SaltMasterInstance
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'CmpNodeCount'
        Timeout: PT10M
    Properties:
      VPCZoneIdentifier:
        - !Ref Subnet
      LaunchConfigurationName:
        Ref: ComputeLaunchConfig
      MinSize: '0'
      MaxSize: '100'
      DesiredCapacity: !Ref 'CmpNodeCount'
      Tags:
        - Key: Application
          PropagateAtLaunch: 'true'
          Value: !Ref 'AWS::StackId'
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: !Join
            - '-'
            - - osd
              - !Ref 'AWS::StackName'
              - minion

Outputs:
  SaltMasterIP:
    Value: !Ref SaltMasterEIP
    Description: Salt API IP
  SaltMasterPrivateIP:
    Value: !GetAtt
      - SaltMasterInstance
      - PrivateIp
